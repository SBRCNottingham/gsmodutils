Genome scale model development framework.
Initially developed by the Nottingham SBRC for use with their genome scale models.

--gsm_project---
Main script is gsm_project; this creates new genome scale model projects given an SBML or JSON file. This creates a folder structre in location with name specified.

* An initial mercruial repository is created with a first commit message.
* Dockerfile is created for the model which can be executed to run model inside of. Install dependencies upon first usage.
* Design directory for storing json designs of the genome scale model
* Initial test scripts are written which can be refined with py.test following the full user guide on tool usage.
* Creates test substrates/pathways json file for automated grows/can't grow tests
* Asks for a project description file and creats this
* Mercurial hooks for pre-commits that run tests and create testing reports


---parse_scrumpy---
Parse scrumpy is a tool that allows a user to create COBRA JSON models from scrumpy but has some requirements.
Note that this script is heavily experimental and only really tested with Nottingham's cupriavidus model. It should parse any model correctly but setting constraints requires a json file with fixed transporter fluxes.
The flux for the ATPase reaction is also required. As most large scrumpy models are built from  metacyc/biocyc, this is assumed


-- Library utitlities --

Projects:

    To be coded more fully.

    using the gsmodutils.project.Project class one can interface with the project.

    This functionality will include the following:

        Creating, loading and adding designs
        
        Very nice feature - storing saves as part of the repository commit process
            - This will be tricky because it means checking to see if there are uncommited changes
            - This could be a mode that is switched on or off by the user and throws errors whenever uncommited changes exist asking the user to handle this

    Load designs.
    Run tests on different models/designs
    tests will automatically load a project and run tests inside of it
    This means a design can be loaded and tests compared against design a and design b
    

-- Dependencies --
python
python-pip
if using docker, docker is required to be installed and configured. 

-- Design Problems to resolve --
Updating things between versions of this software - what if we add new configuration options? what if structure of project changes?

Test cases - default test cases should be part of the software, maybe include a __version__ check on the template test cases?


-- Command line utilities ---
    * scrumpy_to_cobra (done)
    Takes a scrumpy (structural!) model and converts it to a cobra compatable model (so you don't need scrumpy installed).
    BIG TODO - have this work with minimisation of reaction fluxes objective function in cobrapy/cameo based models

    * cobra_to_scrumpy (todo, if needed)
    Create a scrumpy model from a cobrapy model
    
    * gsm_new_project (done)
    Utility for creating a new project around an existing (or new) genome scale model
    
    * gsm_new_design (todo)
    Takes a model (and optionally, specified base model name) and creates a design based on it. Also commits it to the repository.
    
    * gsm_diff_report (todo)
    Create a report of the difference between two gsm models, showing which reactions/metabolites that have changed and how
    
    * gsm_add_conditions (todo)
    Take a models transporter settings and save them in the database with a specific name


-- TODO --

* Model diff reports - human readable
* Test reports - human readable
* Command line utilities as interface to all of project

* logging


* Unit tests for module
    - model diff (done)
    - project creation (done)
    - saving designs (done)
    - config changes
    - Docker files work (This one is hard to make general)
* Full test coverage
    
    
* Mercurial commit hooks when models in the project change
* User guide
* Scripts for starting docker etc


