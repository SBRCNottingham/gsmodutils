Running model tests
===================
A genome scale model is almost never finished.
Thousands of hours of manual curation can go in to models and, as a result,
changes can break things.
For this reason it is good practice to work in a *test driven* manner.
Creating good test cases ensures that if a model once meets criteria for
experimental validation it always meets this criteria.

Running the default tests
-------------------------

A test report can be generated by the tester. This is a command line
utility which, by default, loads each model, set of conditions and
design and performs the FBA simulations. This ensures that any changes
to the project files maintain designs, models and conditions.

.. code-block:: guess

    $ gsmodutils test

The output from the terminal should look something like this:

.. code-block:: guess

    ------------------------- gsmodutils test results -------------------------
    Running tests: ....
    Default project file tests (models, designs, conditions):
    Counted 4 test assertions with 0 failures
    Project file completed all tests without error
        --model_e_coli_core.json

        --design_mevalonate_calvin

        --design_mevalonate_cbb

        --design_cbb_cycle

    Ran 4 test assertions with a total of 0 errors (100.0% success)


Custom tests
------------

Whilst the default tests provided by the tool are a useful way of
ensuring that the project files remain valid after manual curation they
do not have the capability to match all design goals. These design goals
will be based on a data driven approach to genome scale model
development and often require a more fundamental understanding of how an
organism functions.

For this reason we give an example here of the TCA cycle in E coli. In
our case this is a pathway that should be conserved and used in all FBA
cases. If a modification were to break this (without being a specific
engineering goal) the model's validity comes in to question.

Writing python test cases
-------------------------

For many use cases, it may require the use of more complex
functionality. For this reason, gsmodutils allows users to write fully
featured python test cases. This means that any code written in python
can be used and assertion statments can be written and included in the
test reports.


GSMtester class
----------------

.. automodule:: gsmodutils.tester
:members:
        :undoc-members:
        :inherited-members:
        :show-inheritance:
